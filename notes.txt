- performance
  - ihmmune-align: 2.6s per seq or thereabouts
  - note that imgt actually does well on j gene id and j gene hamming-to-true-naive
    - this appears to be because if you completely give up on getting the dj insertion and its erosions correct, you can always expand the j gene all the way to the left,
      so you\'re more likely to get the j gene right (and the j hamming).
    - So! do we want to do this? i.e. we could have an option to only care about getting the genes right
  - min occurences before you start averaging over alleles (& co)
    - tried with 5, 10, 20, 50 (or something like that) made minimal performance difference (...for whatever set of other parameters were in effect at that point)
  - few vs many genes
    - pulled out ~10 v and d genes at random (used all js) and ran on data, made sim, inferred on sim yadda yadda
    - relative performance of sw and hmm was pretty much the same
    - http://stoat.fhcrc.org/sharing/dralph/partis/few/hmm-vs-sw/plots.html
    - http://stoat.fhcrc.org/sharing/dralph/partis/many/hmm-vs-sw/plots.html
  - insertion and deletion dists are consistently a bit narrower for hmm
  - hmm consistently gets d and j correct (up to allele) a bit more than sw, but v they\'re both about 100 percent.
    - hmm\'s v_hamming_to_true_naive is more accurate, though, despite this
  - hmm\'s inferred mute freq is consistently a bit narrower (and less biased) than sw
    - note I wasn\'t really seeing this before... that may have/was probably because I was running performance on 10k rather than 50k seqs
  - even when insertion content is uniform over the bases, the hmm finds an excess of T and a deficit of A. no idea why.
    - same deal for SW, although looks like maybe the A deficit is spread among the other bases more evenly
    - this doesn\'t seem to reflect the underlying base distribution for the whole sequence
  - adding in insertion content doesn\'t seem to help significantly/at all, i.e. the hmm performs just as well with and without it. *sigh*
    - *but* adding it into *simulation* makes a solid difference -- both SW and HMM do better on simulated sequence where the inserts have non-uniform base content
  - changing fuzzes from 2 to 10 helps a tiny bit on hamming distance, and not at all in anything else

- imgt fasta download: http://www.imgt.org/vquest/refseqh.html
- original adaptive data
    /shared/silo_researcher/Matsen_F/MatsenGrp/data/bcr/output_sw/A/03-A-N1_merged.tsv.bz2
    /shared/silo_researcher/Matsen_F/MatsenGrp/data/bcr/output_sw/A/03-A-N2_merged.tsv.bz2
    /shared/silo_researcher/Matsen_F/MatsenGrp/data/bcr/output_sw/A/04-A-M_merged.tsv.bz2
    /shared/silo_researcher/Matsen_F/MatsenGrp/data/bcr/output_sw/B/05-B-N_merged.tsv.bz2
    /shared/silo_researcher/Matsen_F/MatsenGrp/data/bcr/output_sw/B/06-B-M_merged.tsv.bz2
    /shared/silo_researcher/Matsen_F/MatsenGrp/data/bcr/output_sw/C/01-C-N_merged.tsv.bz2
    /shared/silo_researcher/Matsen_F/MatsenGrp/data/bcr/output_sw/C/02-C-M_merged.tsv.bz2
- vollmers data: /shared/silo_researcher/Matsen_F/MatsenGrp/data/stanford-lineage/2014-11-17-vollmers
- adaptive five prime race: /shared/silo_researcher/Matsen_F/MatsenGrp/data/adaptive-five-prime-race/
- PROFILING!
  - conclusions
    - chunk caching works!
    - symbol_index() and the Sequence[s] constructors/destructors no longer take significant time

