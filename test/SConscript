import os
import glob
import sys
from SCons.Script import Command, Depends

env = Environment(ENV=os.environ, SHELL='/bin/bash')
sys.path.append(os.getenv('HOME') + '/bin')

cmd = './runpart.py'

data_parameter_dir = 'caches/new-imgt'
simu_parameter_dir = 'caches/simu-new-imgt'
data_test_file = 'test/every-hundredth-data.tsv.bz2'
long_simu_test_file = 'test/recombinator/simu.csv.bz2'
performance_plot_file = 'caches/recombinator/longer-reads/simu.csv'

dummy_plotdir = '/tmp/' + os.path.basename(os.getenv('HOME')) + '/dummy-plots'

tests = {
    # # first cache data parameters in <data_parameter_dir>
    # 'cache-data-parameters' : cmd + ' --cache_parameters --seqfile ' + data_test_file + ' --is_data --parameter_dir ' + data_parameter_dir + ' --plotdir ' + dummy_plotdir + ' --n_procs 10 --skip_unproductive',
    # # then simulate sequences from these parameters (we only need this step so in the *next* step we can get parameters on longer sequences NOTE you *really* want to parallelize this (see e.g. run.sh)
    # 'simulate-long-seqs' : '--simulate --parameter_dir ' + data_parameter_dir + '/hmm_parameters --n_max_queries 10000 --outfname ' + long_simu_test_file,
    # 'cache-simu-parameters' : cmd + ' --cache_parameters --seqfile ' + long_simu_test_file + ' --parameter_dir ' + simu_parameter_dir + ' --plotdir ' + dummy_plotdir + ' --n_procs 10',

    # 'plot-performance' : '. /home/dralph/root/bin/thisroot.sh; ' + cmd + ' --plot_performance --point_estimate --seqfile ' + performance_plot_file + ' --parameter_dir ' + simu_parameter_dir + '/hmm_parameters --n_max_queries 10000 --plotdir ' + os.getenv('www') + '/partis/test-performance-plot --n_procs 10',

    # 'single-point-estimate' : [ cmd, '--point_estimate', '--seqfile', simu_test_file, '--parameter_dir', parameter_dir + '/hmm_parameters', '--n_max_queries', '1', '--debug', '1'],
    # 'partition-a-few' : [cmd, '--partition', '--pair', '--seqfile', simu_test_file, '--parameter_dir', parameter_dir + '/hmm_parameters', '--n_procs', '10', '--n_max_per_region', '2'],
    # 'viterbi-pair' : [cmd, '--point_estimate', '--pair', '--seqfile', simu_test_file, '--parameter_dir', parameter_dir + '/hmm_parameters', '--debug', '1', '--queries', '\' -2996237710674838049:1722533587157826946:1516698783101435629\'']
}

all_passed = '_results/ALL.passed'
individual_passed = ['_results/{}.passed'.format(name) for name in tests.keys()]

for path in individual_passed + [all_passed]:
    if os.path.exists(path):
        os.remove(path)

for name, test_cmd in tests.items():
    out = '_results/%s.out' % name
    env.Command(out, '../' + cmd, test_cmd + ' --outfname $TARGET')
    Depends(out, [glob.glob('../python/*.py'), '../packages/ham/ham'])
    # touch a sentinel `passed` file if we get what we expect
    Command('_results/%s.passed' % name,
            [out, 'data/regression/%s.out' % name],
            'diff ${SOURCES[0]} ${SOURCES[1]} && touch $TARGET')

# Set up sentinel dependency of all passed on the individual_passed sentinels.
Command(all_passed,
        individual_passed,
        'cat $SOURCES > $TARGET')
