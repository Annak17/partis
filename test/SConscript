import os
import glob
from collections import OrderedDict
import sys
from SCons.Script import Command, Depends

env = Environment(ENV=os.environ, SHELL='/bin/bash')
sys.path.append(os.getenv('HOME') + '/bin')

datadir = 'data/imgt'
parameter_dir = 'caches/performance/test/simu/hmm_parameters'
dummy_plotdir = '/tmp/' + os.path.basename(os.getenv('HOME')) + '/dummy-plots'

testoutdir = 'caches/test'
if not os.path.exists('../' + testoutdir):
    os.makedirs('../' + testoutdir)

base_cmd = './plotperformance.py --label test --datadir ' + datadir + ' --extra-args \' --seed:1\' --plotdir ' + testoutdir + '/plots'
actions = OrderedDict()
actions['cache-data-parameters'] = 'data'  # key is name, value is target (note that the target corresponds to a directory or file in <testoutdir>
actions['simulate'] = 'simu.csv'
actions['cache-simu-parameters'] = 'simu'
actions['plot-performance'] = 'plots'

tests = OrderedDict()
for action in actions:
    tests[action] = base_cmd + ' --action ' + action
tests['single-point-estimate'] = './runpart.py --point-estimate --datadir ' + datadir + ' --seqfile test/data/regression/simu.csv --parameter-dir ' + parameter_dir + ' --n-max-queries 1 --debug 1'
tests['partition-a-few'] = './runpart.py --partition --pair --datadir ' + datadir + ' --seqfile test/data/regression/simu.csv --parameter-dir ' + parameter_dir + ' --n-max-queries 8 --debug 1'
tests['viterbi-pair'] = './runpart.py --point-estimate --pair --datadir ' + datadir + ' --seqfile test/data/regression/chopped-simu.csv --parameter-dir ' + parameter_dir + ' --debug 1'

all_passed = '_results/ALL.passed'
individual_passed = ['_results/{}.passed'.format(name) for name in tests.keys()]

for path in individual_passed + [all_passed]:
    if os.path.exists(path):
        os.remove(path)

cmd = './runpart.py'  # this is a silly place to put this... remove it when you get the new stuff sorted
for name, test_cmd in tests.items():
    out = '_results/%s.out' % name
    Depends(out, [glob.glob('../python/*.py'), '../packages/ham/bcrham'])
    if name in actions:
        target = actions[name]  # some targets are dirs, which scons doesn't handle, but either way we want to diff the whole target
        env.Command(out, '../' + cmd, test_cmd + ' && touch $TARGET')
        env.Command('_results/%s.passed' % name,
                    ['data/regression/parameters/' + target, '../' + testoutdir + '/' + target, out],
                    'diff -qr  -x\'*.svg\' -x params ${SOURCES[0]} ${SOURCES[1]} && touch $TARGET')
    else:
        env.Command(out, '../' + cmd, test_cmd + ' --outfname $TARGET')
        # touch a sentinel `passed` file if we get what we expect
        env.Command('_results/%s.passed' % name,
                [out, 'data/regression/%s.out' % name],
                'diff ${SOURCES[0]} ${SOURCES[1]} && touch $TARGET')

# Set up sentinel dependency of all passed on the individual_passed sentinels.
Command(all_passed,
        individual_passed,
        'cat $SOURCES > $TARGET')
