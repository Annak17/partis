import os
import glob
import sys
from SCons.Script import Command, Depends

env = Environment(ENV=os.environ, SHELL='/bin/bash')
sys.path.append(os.getenv('HOME') + '/bin')

# data_parameter_dir = 'caches/new-imgt'
# simu_parameter_dir = 'caches/simu-new-imgt'
# data_test_file = 'test/every-hundredth-data.tsv.bz2'
# long_simu_test_file = 'test/recombinator/simu.csv.bz2'
# performance_plot_file = 'caches/recombinator/longer-reads/simu.csv'

cmd = './runpart.py'
datadir = 'data/imgt'
parameter_dir = 'caches/performance/test/simu/hmm_parameters'
dummy_plotdir = '/tmp/' + os.path.basename(os.getenv('HOME')) + '/dummy-plots'

# RUN ./runpart.py --cache-parameters --seqfile test/every-hundredth-data.tsv.bz2 --is-data --skip-unproductive --n-procs 10 --datadir data/imgt/ --parameter-dir caches/performance/test/data --plotdir /var/www/sharing/dralph/partis/performance/test/params/data --n-max-queries -1
# RUN ./runpart.py --simulate --outfname caches/recombinator/performance/test/simu.csv --n-procs 10 --datadir data/imgt/ --parameter-dir caches/performance/test/data/hmm_parameters --n-max-queries 2000
# RUN ./runpart.py --cache-parameters --seqfile caches/recombinator/performance/test/simu.csv --n-procs 10 --datadir data/imgt/ --parameter-dir caches/performance/test/simu --plotdir /var/www/sharing/dralph/partis/performance/test/params/simu --n-max-queries -1
# RUN ./runpart.py --point-estimate --plot-performance --seqfile caches/recombinator/performance/test/simu.csv --n-procs 10 --datadir data/imgt/ --parameter-dir caches/performance/test/simu/hmm_parameters --plotdir /var/www/sharing/dralph/partis/performance/test --n-max-queries -1

tests = {
    # for the time being skip the simulation step and use a cached simu file
    # 'cache-and-plot-performance' : './plotperformance.py --label test --datadir ' + datadir + ' --skip-simulation --simfname test/simu.csv',

    'single-point-estimate' : cmd +  ' --point-estimate --datadir ' + datadir + ' --seqfile test/simu.csv --parameter-dir ' + parameter_dir + ' --n-max-queries 1 --debug 1',
    'partition-a-few' : cmd +  ' --partition --pair --datadir ' + datadir + ' --seqfile test/simu.csv --parameter-dir ' + parameter_dir + ' --n-max-queries 8 --debug 1',
    'viterbi-pair' : cmd +  ' --point-estimate --pair --datadir ' + datadir + ' --seqfile test/chopped-simu.csv --parameter-dir ' + parameter_dir + ' --debug 1',
}

all_passed = '_results/ALL.passed'
individual_passed = ['_results/{}.passed'.format(name) for name in tests.keys()]

for path in individual_passed + [all_passed]:
    if os.path.exists(path):
        os.remove(path)

for name, test_cmd in tests.items():
    out = '_results/%s.out' % name
    env.Command(out, '../' + cmd, test_cmd + ' --outfname $TARGET')
    Depends(out, [glob.glob('../python/*.py'), '../packages/ham/bcrham'])
    # touch a sentinel `passed` file if we get what we expect
    Command('_results/%s.passed' % name,
            [out, 'data/regression/%s.out' % name],
            'diff ${SOURCES[0]} ${SOURCES[1]} && touch $TARGET')

# Set up sentinel dependency of all passed on the individual_passed sentinels.
Command(all_passed,
        individual_passed,
        'cat $SOURCES > $TARGET')
