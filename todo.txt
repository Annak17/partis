
# ----------------------------------------------------------------------------------------
  - write shit up!

  - put in erick\'s idea about replacing the single insert state with an insert state for A, C, G, and T
  - think *long* and *hard* about get_emission_prob() in hmmwriter. especially the pair part, since you didn\'t performance test that
    - UPDATE hm, on second thought I\'m just going to punt on the pair hmm stuff
    - TODO fix that!
  - track down more sequences that give no-valid-path errors in the hmm
  - test against igblast
  - looking at the plots, my insertions and deletions are on average too small. Why is this? picture
  - move this todo list into github issues
  - go through all of jobholder making sure I\'m not using query_strs.first instead of both, or instead of choosing the proper one
  - TODOs in code
  - add testing framework to partis (include timing info)
    - short reads, long reads, reads with v left and j right erosions
    - single viterbi, viterbi pair, clustering
    - allow to set seeds (I think just in recombinator?) for reproducibility
    - parameter estimation from sw and hmm


  # ----------------------------------------------------------------------------------------
  # lower priority
  - if hamming distance is *very* small could precluster the *other* way, i.e. assume pairs are in the same event
  - stop using hackey versions of gtr.txt and trees.tre in recombinator. I.e. start inferring phylogenies
  - tree inference closure tests in recombinator
  - synchronize replacement_gene treatment for *all* parameters between hmmwriter and recombinator
  - account for different mutation frequencies to different bases (it seems that this will require forking bppseqgen)
  - add recombinator run to scons test
  - optimizing recombinator:
    - indeed it seems to be all in generating the mutants with bppseqgen
      - if I switch to a tree with ten times the tips, but then generate the same number of sequences as before, it runs like a hundred times faster
    - could add an option to generate all the seqs with the same tree? hm, no, that probably wouldn\'t help cause the other input files would still be different


    - will need to deal with productive and out-of-frame seqs separately, i.e. different parameters
    - disallow stop codons, out of frame and frame-shifted rearrangements in recombinator
    - do I really want to apply the gene choice prob in waterer?
    - print a warning when the kbounds we pass to the hmm don\'t include the true one (and same thing for the gene versions)
    - optimization
      - wow, switching from passing seqs by reference to value really slowed it down -- need to go through Viterbi() and Forward() and see if there\'s any other call-by-values I can remove
      - would it be faster with STATE_MAX less than 1024?
        - for k_v --> k_v + 1, don\'t recalculate the whole table
      - run performance profiling
      - adding the gobbledygook states seems to have *really* slowed it down (EDIT oh, wait, that was just removing the gcc optimization options)
      - hmm structure optimization
        - it seems like I should be able to take advantage of the fact that all my hmms are super linear, i.e. the matrix of possible transitions is very sparse
        - implement banding? I think I have this listed below but without using the word 'banding'
      - try pairwise s-w for preclustering (all against all -- align against each *other* using sw)
    - I should really be able to construct the denominator in P(A,B) / (P(A) P(B)) from the numerator without recalculating much, right?
      - blast instead of s-w?
      - when we\'re doing pairs, it seems there should be some optimizations due to the fact we don\'t need to actually identify the gene versions, but only partition the sequences (EDIT wait, what?)
      - alleles: save chunks of dp tables and reuse \'em
    - accuracy improvement
      - play around with s-w match/mismatch scores (match was 3[:1], just changed to 2[:1]... not sure what\'s best. It\'ll depend on the expected level of mutation. *sigh*)
      - the choices we make about which is the best reconstruction near the d/insertions is very dependent on how much mutation we think occurred
        - so try to use the amount of mutation in v to inform this decision (?)
        - i.e., calculate the within-sequence correlation between V mutation and D/insertion mutation
    - clustering
      - connor\'s spectral decomposition sorting
      - use an N-HMM instead of a pair-HMM plus pairscore clustering (do some heuristic preclustering, then for each of these clusters, use the n-hmm viterbi path, and cluster on these)
      - neighbor-joining
      - transitivity:
        - rather than assuming transitivity in clustering, couldn\'t I use the extra information to improve clustering?
            (NOTE this is roughly equivalent to representing an existing cluster by its viterbi path. hm, with mutations or not?)

  # ----------------------------------------------------------------------------------------
  # finished(ish)
  - compare other people\'s 'viterbi' codes
    - programs
      - imgt/vquest: http://www.imgt.org/IMGT_vquest/vquest
      - ihmmunealign  2.6 sec/seq
      - soda[12]
      - joinsolver
    - get timing info for all codes

  - separate training and testing samples for performance comparison
    - OH WAIT NO it\'s totally fine. I\'m not *using* the fact that I know the right answer on simulation. woot.
